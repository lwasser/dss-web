[{"categories":null,"contents":" Table Of Contents About Git and GitHub Directory Structure of Repositories URL of Repositories on GitHub.com Create a Copy of Other Users\u0026rsquo; Files on GitHub.com (Fork a Repo) Copy Files From GitHub.com to Your Computer (git clone) Use Bash to Change to Your Desired Working Directory Copy a Github.com Repository URL From GitHub.com Run the Git Clone Command in the Terminal Learning Objectives\nAfter completing this page, you will be able to:\nExplain how a GitHub repository stores and tracks changes to files. Create a copy of (i.e. fork) other users\u0026rsquo; files on GitHub.com . Use the git clone command to download a copy of a GitHub repository to your computer. {{{\n}}}\nAbout Git and GitHub Previously, you learned that git is tool that is used to track changes in files (a process called version control) through a suite of commands that you can execute in the Terminal. You also learned that GitHub allows you to store files in the cloud to access them from any computer and to share them with others.\nYou can use git and GitHub together in a workflow to make changes to files locally with git and to store and share your files on GitHub.com. To work together, git and GitHub use repositories (i.e. directories of files) to manage and store files.\nTip\nA GitHub repository is a directory of files and folders that is hosted on GitHub.com.\nHaving a copy of a set of files stored in GitHub repositories in the cloud is ideal because:\nThere is a backup: If something happens to your computer, the files are still available online. You can share the files with other people easily. You can even create a Digital Object Identifier (DOI) using third party tools like Zenodo to cite your files or ask others to cite your files. You can also add these DOIs to your resume or C.V. to promote your work. Directory Structure of Repositories In essence, a repository is a directory for a specific project that is identified as a repository by git and GitHub because it contains a subdirectory called .git.\nThe .git subdirectory is created automatically, either by GitHub if it is created on GitHub.com or by git if the repository is created locally on a computer first (i.e. initialized as a repository). This .git subdirectory is used by these tools to manage and track the various tasks that are run on this directory (e.g. tracking changes to files in the repository). Thus, you never need to access or modify the files in the .git subdirectory.\nA typical repository (e.g. project-name) is structured as follows:\nproject-name .git/ data/ scripts/ .gitignore README.md In addition to the .git subdirectory, it is common to have subdirectories for specific files of a workflow such as data or scripts. A few common files in most if not all git repos are:\nREADME.md file: This is a Markdown file that is used to provide a description of the repository (i.e. its contents, purpose, etc), so that others can learn how to use the files in the repository. .gitignore file: This file can be used to list the files that you do not want git to track (i.e. monitor via version control). You will learn more about both of these useful files later in this chapter. URL of Repositories on GitHub.com When a repository is stored on GitHub.com, it is assigned a unique URL (i.e. link on the GitHub.com website) that can be used to find the repository and access its files. While repositories on GitHub.com can be made either public or private, the default is public for free GitHub accounts.\nIn either case (public or private), the URL links to a GitHub repository always follows the same format:\nhttps://github.com/username/repository-name\nThe username is the username of the creator (i.e. owner) of the repository. The username can either be an individual such as eastudent (or your GitHub username!), or it can represent an organization such as data-science-skills. For example, the repositories that you will work with throughout this module are owned by data-science-skills, and thus, will have URLs that look like this:\nhttps://github.com/data-science-skills/repository-name\nCreate a Copy of Other Users\u0026rsquo; Files on GitHub.com (Fork a Repo) Using GitHub.com, you can make a copy of a GitHub repository (also known as a repo) owned by another user or organization (a task referred to as forking a repository). This means that you do not have to fork a repository that you already own. Instead, other users can fork your repository if they would like a copy to work with, and your original files will not be modified!\nThe ability to fork a repository is a benefit of using GitHub repositories because the forked repository is linked to the original. This means that you (or other users) can update the files in your fork from the original to your (or their) forked repository. It also means that you can suggest changes to the original repository, which can be reviewed by the owner of that repository. Thus, forking allows you to collaborate with others while protecting the original versions of files. When collaborating, everyone will work with copies of the original files. And all changes are tracked in each file\u0026rsquo;s history and can be undone at any time.\nYou can fork an existing GitHub repository from the main GitHub.com page of the repository that you want to copy.\nTo fork a repo:\nNavigate to the repo page that you wish to fork. If you don\u0026rsquo;t have one to work with now, you can use our lesson repo here : https://github.com/data-science-skills/practice-git\nOn that page, you will see a button in the UPPER RIGHT hand corner that says Fork. The number next to that button tells you how many times the repo has already been forked. Click on the Fork button and select your user account when it asks you where you want to fork the repo. Once you have forked the repo, you will have a copy of it in your account. Navigate to your repo page. The url should look something like this: https://github.com/your-user-name/practice-git\nYou can make a local copy of your forked repository on your computer with the git clone command. In this demo we uncheck the copy main only option. You can decide if you wish to copy over all of the branches or just the main branch depending upon what you need to do with the fork. In another module on GitHub for collaboration, you will learn how to suggest changes to the original repository, receive updates from the original repository to your fork, and collaborate with others.\nCopy Files From GitHub.com to Your Computer (git clone) To work locally with a GitHub repository (including forked repos), you need to create a local copy of that repository on your computer (a task referred to as cloning a repo). You can clone GitHub repositories that you own or that are owned by others (e.g. repositories that you have forked to your GitHub account).\nIn either case, cloning allows you to create a local copy of a GitHub repository, so that you can work with the files locally on your computer. Cloning a repository to your computer is a great way to work on your files locally, while still having a copy of your files on the cloud on GitHub.com. Following the steps below, you will use the git clone command in the terminal to clone GitHub repositories.\nUse Bash to Change to Your Desired Working Directory The first step to using any git command is to change the current working directory to your desired directory. In the case of git clone, the current working directory needs to be where you want to download a local copy of a GitHub repository.\nFor this module, you will clone a repo into a directory called dss-skills on your computer (or wherever you are working. This dss-skills directory should be located in the home directory of your computer.\n# This command with change your directory to home (`~`) /dss-skills # If the directory doesn\u0026#39;t already exist you can make it using mkdir ~/dss-skills $ cd ~/dss-skills $ pwd /users/your-user-name/dss-skills Copy a Github.com Repository URL From GitHub.com To run the git clone command, you need the URL for the repository that you want to clone (i.e. either a repository owned by you or a fork that you created of another user\u0026rsquo;s repository).\nOn the main GitHub.com page of the repository, you can click on the green button for Clone or download, and copy the URL provided in the box, which will look like:\nhttps://github.com/your-username/practice-git\nYou can make a local copy of your forked repository on your computer with the git clone command. Note that in this example, there is an additional authentication step at the command line using a security key (a yubikey). It’s ok if you do not have that setup for the time being. We will discuss security and authentication in a future git lesson. Tip\nYou can also copy the URL directly from your web browser, or in some cases, you might already know the URL. However, in many cases, you will come across a new GitHub.com repository on your own and will need to follow these instructions to copy the URL for future use.\nRun the Git Clone Command in the Terminal Now that you have the URL for a repository that you want to copy locally, you can use the terminal to run the git clone command followed by the URL that you copied:\ngit clone https://github.com/your-username/practice-git You have now made a local copy of a repository under your dss-skills directory. You can double check that the directory exists using the ls command in the terminal.\n$ ls practice-git Try it yourself\nChallenge - Fork and Clone a Repository\nGo to GitHub.com and login. Then use the link below to open the practice-git repo.\nhttps://github.com/data-science-skills/practice-git\nOn the main GitHub.com page of this repository, you will see a button on the top right that says Fork. The number next to Fork tells the number of times that the repository has been copied or forked. Click on the Fork button and select your GitHub.com account as the home of the forked repository. Once you have forked a repository, you will have a copy (or a fork) of that repository in your GitHub account. The URL to your fork will contain your username: https://github.com/your-username/practice-git\nFinally, clone the fork that you created above so you have a copy of all the files on github.com on your local computer. To make sure you did things right, in bash, cd to the practice-git directory on your computer. Type:\n$ git remote -v\nThe paths returned should look something like this:\nhttps://github.com/your-username/practice-git\n","date":"September 4, 2023","image":null,"permalink":"/lessons/git-github/git-intro/3-fork-clone/","title":"Fork and Clone GitHub Repos"},{"categories":null,"contents":" Table Of Contents Git and GitHub Workflow For Version Control Check the Status of Changes Using Git Status Adding and Committing File Changes To Version Control Add Changed Files Using git add Commit Changed Files Using git commit Push Changed Files to GitHub.com Pull Changed Files from GitHub.com to Your Cloned Repo View All Commits to Repository Using git log Tell Git to Ignore Files Using a .gitignore file Learning Objectives\nAfter completing this page, you will be able to:\nUse git to add and commit changed files to version control. Use git to push changed files from your local computer to the repository on Github.com. Use git to pull changed file from your repo to your local computer. Git and GitHub Workflow For Version Control Previously, you learned how to fork GitHub repositories to make copies of other users\u0026rsquo; repositories, and you also learned how to download copies of (i.e. clone) GitHub repositories to your computer. On this page, you will learn to use git to implement the three important steps of version control:\ngit add changed files to version control tracking. git commit the changed files to create a unique snapshot of the local repository. git push those changed files from the local copy of a repository to the cloud (GitHub.com). You will also setup your git credentials locally.\nCheck the Status of Changes Using Git Status Once you start working, you can use the git status command to check what changes are being identified by git. To practice working with this command, use the terminal to navigate to your git practice repository:\n$ cd practice-git\nNext, run git status.\n$ git status On branch main Your branch is up to date with \u0026#39;origin/main\u0026#39;. nothing to commit, working tree clean Notice that when you run git status it returns: working tree clean. This means that there are no changes to any files in your repo - YET.\nNext, open and make a small change to the README.md file in a text editor. Then, run the command git status to check that changes have been made to your file(s).\ngit status On branch main Your branch is up-to-date with \u0026#39;origin/main\u0026#39;. Changes not staged for commit: (use \u0026#34;git add \u0026lt;file\u0026gt;...\u0026#34; to update what will be committed) (use \u0026#34;git checkout -- \u0026lt;file\u0026gt;...\u0026#34; to discard changes in working directory) modified: README.md no changes added to commit (use \u0026#34;git add\u0026#34; and/or \u0026#34;git commit -a\u0026#34;) The output from the git status command above indicates that you have modified a file (e.g. README.md) that can be added to version control.\nAdding and Committing File Changes To Version Control To keep track of changes to this file using git, you need to:\nfirst git add the changes to tracking (or staging area), and then git commit the changes to version control. These two commands make up the bulk of many workflows that use git for version control:\ngit add: takes a modified file in your working directory and places the modified version in a staging area for review.\ngit commit: takes everything from the staging area and makes a permanent snapshot of the current state of your repository that has a unique identifier.\nModified files are staged using git add. Then, following git commit, all files in the staging area are included in snapshot and become part of the repository's history, receiving a unique SHA-1 hash identifier. Source: Max Joseph, adapted from Pro Git by Chacon and Straub (2014). Add Changed Files Using git add After making changes, you can add either an individual file or groups of files to version control tracking. To add a single file, run the command:\ngit add file-name.extension\nFor example, to add the README.md file, you would use:\ngit add README.md\nYou can also add all of the files that you have edited at the same time using:\ngit add .\nTip\nUse git add . with caution. Be sure to review the results from git status carefully before using git add .. You do not want to accidentally add files to version control that you do not want to change in your GitHub repository!\nCommit Changed Files Using git commit Once you are ready to make a snapshot of the current state of your repository (i.e. move changes from staging area), you can run git commit. The git commit command requires a commit message that describes the snapshot (i.e. changes) that you made in that commit.\nA commit message should outline what changed and why. These messages:\nhelp collaborators and your future self understand what was changed and why. allow you and your collaborators to find (and undo if necessary) changes that were previously made. When you are not committing a lot of changes, you can create a short one line commit message using the -m flag as follows:\ngit commit -m \u0026quot;Update title and author name in homework for week 3\u0026quot;\nEach commit is provided a unique identifier (SHA-1 hash) and includes all changes to files in the staging area when the commit was created (i.e. all files that had been added to staging using git add).\nPush Changed Files to GitHub.com So far you have only modified your local copy of the repository and completed a local commit to the repository. To update the files on GitHub.com, you need to push the changed files to the repository on GitHub.com.\nYou can push your changes to GitHub using the command:\ngit push origin main\nDepending on your settings, you may then be prompted for your Github.com username and password. After you have pushed your commits to GitHub.com, visit your repository (e.g. https://github.com/username/repository-name) and notice that your changes are reflected there.\nAlso notice that you have access to the full commit history for your repository.\nThe full list of commits that have been pushed to a repository are available for you to see and review as needed on GitHub.com by clicking on the commits text on the repo home page. Pull Changed Files from GitHub.com to Your Cloned Repo Above, you learned how to use git clone to create a copy of a repo on github.com on your local computer. Running git clone will make a full copy of the git repo from github.com to your local computer. It includes all of the .git history information that you will need to track changes in your repo. You only need to run git clone once. After you have run git clone, you can us git pull to update your repo.\nYou also learned how to add and commit changes using git add and git commit.\nThe workflow above assumed that you are always making changes locally and then pushing those changes back up to GitHub.com. Sometimes, however, you will need to pull down changes that were made to your repo, locally.\nSome examples of when you may need to use git pull include:\nWhen you may want to use git pull is to retrieve the feedback .html file added to your GitHub repo by your instructor When you are working collaboratively (covered in the next chapter) and someone else modifies some of the code in your repo using a pull request. To update your repo with changes that are on GitHub.com you can do the following:\nOpen up bash and cd to the location of your git repo. Once you are in the repo, run git pull. In the example below, there are no changes to any files. git pull returns Already up to date.\n$ cd practice-git/ $ git pull Already up to date. Below is an example of using git pull when there are changes on github.com to pull down. Notice that it gives you a summary of what files were changed (in the example below this is the README.md file) and how many changes were made.\n$ cd practice-git/ $ git pull remote: Enumerating objects: 5, done. remote: Counting objects: 100% (5/5), done. remote: Compressing objects: 100% (3/3), done. remote: Total 3 (delta 2), reused 0 (delta 0), pack-reused 0 Unpacking objects: 100% (3/3), done. From github.com:data-science-skills/practice-git 7d45e2c..675d82e main -\u0026gt; origin/main Updating 7d45e2c..675d82e Fast-forward README.md | 2 +- 1 file changed, 1 insertion(+), 1 deletion(-) All of the changes that were made to your repo, will be pulled down to your local repo.\nView All Commits to Repository Using git log You can also see a list of all commits to a repository (even those that have yet not been pushed to GitHub.com!) when working locally with the repository on your computer.\nTo see a list of all commits, you can run the command:\ngit log\nWhich returns something like the following:\ncommit 6575476476hdjig946jksg95jywkg034mk6gkro6 Author: eastudent \u0026lt;eastudent@email.edu\u0026gt; Date: Mon Aug 5 15:30:54 2019 -0600 Update title and author name in homework for week 3 Notice that git log provides a lot of useful information about the commit, including the unique identifier assigned to that snapshot, the message description provided during the commit (i.e. the message after -m) as well as the date, time, and author of the commit.\nTip\ngit log by default returns a lot of information. You can view the log as single line entries with just the commit message using git log --pretty=oneline. git log -- pretty=oneline | head -n 10 will show you the most recent 10 entries. IMPORTANT: when the log results appear in bash, you can use the space bar to scroll through the results. If you want to return to the command prompt, hit the q key (q for quit). Try it out!\nTell Git to Ignore Files Using a .gitignore file Sometimes there are files in your git repo that you do not want to be tracked. If you are on a MAC these may be hidden files such as\n_DS_STORE files (MAC) or .ipynb checkpoint files. Other times you have sensitive files in a repository that you never want to track with git such as API credentials or other files containing personal information. You can add any file types or names to a .gitignore file. git will then not track them. This means that when you run git add or git status, it will not track any files listed in the .gitignore file. These files will thus never be added to GitHub.com.\nLet\u0026rsquo;s pretend that you have a file called social-security.txt that contains sensitive information. You can add that file to a .gitignore file. If the .gitignore file is not already present in the repository, you can create it manually using a text, or using the following bash command:\n# Comment in bash # Create a .gitignore file if one doesn\u0026#39;t already exist touch .gitignore Tip\nAbove, the bash command touch is used to create a new .gitignore file (this is only useful if the file does not already exist.\nOpen this .gitignore file in a text editor and add the file names (with no other information needed) that you want git to ignore, for example:\nsocial-security.txt\nAny files listed in the .gitignore file will be ignored by git. You can also tell git to ignore directories by adding the directory name to the gitignore file (e.g. ignore a directory called private-directory):\nprivate-directory/ Learn more about using .gitignore files to ignore files and directories in your git repository on the Software Carpentry Git Lessons.\nTry it yourself\nChallenge - Create a New Text File In Your Repo\nIt\u0026rsquo;s time to practice your git skills! Do the following:\nIf you haven\u0026rsquo;t already, fork the https://github.com/data-science-skills/practice-git repo. Next, clone your fork of that repo using git clone Open up the README.md file and make some changes to the text Use git add and git commit to add and commit those changes Finally push the changes up to github.com using git push Now, go to the url where the repo is on Github.com - the path to the repo likely looks something like the path below:\n(replace your-github-username with your real github username!)\nhttps://github.com/your-github-username/practice-git Do you see your changes to the README.md file?\n","date":"September 4, 2023","image":null,"permalink":"/lessons/git-github/git-intro/5-git-commands/","title":"Get Started with Git Commands for Version Control"},{"categories":null,"contents":"New lesson the files all git repos should have for open science (can then link to readme) ","date":"September 4, 2023","image":null,"permalink":"/lessons/git-github/git-intro/new-lessons/","title":"Git repo files... "},{"categories":["collaboration-version-control"],"contents":" Table Of Contents What is Version Control? Types of Version control Why Version Control is Important How Version Control Systems Works Simple Version Control Model Git and GitHub - A Distributed Version Control Model How Git and GitHub Support Version Control Get Started With Git/GitHub.com Learn about the benefits of version control for tracking and managing changes to your files. You will also learn how to implement version control using git and then upload changes to Github.com.\nLearning Objectives\nAfter completing this module, you will be able to:\nDefine version control. Explain why version control is useful in a scientific workflow. Implement version control using git. What You Need Be sure that you have completed the instructions on Setting up Git, Bash, and Conda on your computer to install the tools for your operating system (Windows, Mac, Linux).\nYou will also need a web browser and your GitHub.com login (username and password).\nWhat is Version Control? A version control system maintains a record of changes to code and other content. It also allows us to revert changes to a previous point in time.\nMany of us have appended a date to a file name as a method of version control at some point in our lives. Source: Piled Higher and Deeper by Jorge Cham. Types of Version control There are many forms of version control. Some not as good:\nSave a document with a new date or name (we\u0026rsquo;ve all done it, but it isn\u0026rsquo;t efficient and easy to lose track of the latest file). Google Docs \u0026ldquo;history\u0026rdquo; function (not bad for some documents, but limited in scope). Some better:\nVersion control tools like Git, Mercurial, or Subversion. Why Version Control is Important Version control facilitates two important aspects of many scientific workflows:\nThe ability to save and review or revert to previous versions. The ability to collaborate on a single project. This means that you don\u0026rsquo;t have to worry about a collaborator (or your future self) overwriting something important. It also allows two people working on the same document to efficiently combine ideas and changes.\nHow Version Control Systems Works Simple Version Control Model A version control system tracks what has changed in one or more files over time. Version control systems begin with a base version of a document. Then, they save the committed changes that you make.\nYou can think of version control as a tape: if you rewind the tape and start at the base document, then you can play back each change and end up with your latest version.\nA version control system saves changes to a document, sequentially as you add and commit them to the system. Source: Software Carpentry. Once you think of changes as separate from the document itself, you can then think about \u0026ldquo;playing back\u0026rdquo; different sets of changes onto the base document. You can then retrieve, or revert to, different versions of the document.\nCollaboration with version control allows users to make independent changes to the same document.\nDifferent versions of the same document can be saved within a version control system. Source: Software Carpentry. If there aren\u0026rsquo;t conflicts between the users\u0026rsquo; changes (a conflict is an area where both users modified the same part of the same document in different ways), you can review two sets of changes on the same base document. If there are conflicts, they can be resolved by choosing which change you want to keep.\nTwo sets of changes to the same base document can be merged together within a version control system if there are no conflicts (areas where both users modified the same part of the same document in different ways). If there are conflicts, they can resolved by choosing which change you want to keep. After conflicts are resolved, all other changes submitted by both users can then be merged together. Source: Software Carpentry. A version control system is a tool that keeps track of all of these changes for us. Each version of a file can be viewed and reverted to at any time. That way if you add something that you end up not liking or delete something that you need, you can simply go back to a previous version.\nGit and GitHub - A Distributed Version Control Model Git uses a distributed version control model. This means that there can be many copies (or forks/branches in GitHub world) of the repository. When working locally, git is the program that you will use to keep track of changes to your repository.\nGitHub.com is a location on the internet (a cloud web server) that acts as a remote location for your repository. GitHub provides a backup of your work that can be retrieved if your local copy is lost (e.g. if your computer falls off a pier). GitHub also allows you to share your work and collaborate with others on projects.\nOne advantage of a distributed version control system is that there are many copies of the repository. Thus, if any one server or computer dies, any of the client repositories can be copied and used to restore the data! Source: Pro Git by Scott Chacon and Ben Straub How Git and GitHub Support Version Control Due to the functionality that each tool provides, you can use git and GitHub together in the same workflow to:\nkeep track of changes to your code locally using git. synchronizing code between different versions (i.e. either your own versions or others\u0026rsquo; versions). test changes to code without losing the original. revert back to older version of code, if needed. back-up your files on the cloud (GitHub.com). share your files on GitHub.com and collaborate with others. Throughout this module, you will learn about using of git and GitHub for both version control and collaboration to support open reproducible science.\n","date":"September 4, 2023","image":null,"permalink":"/git-intro/about-version-control.html","title":"What Is Version Control"},{"categories":null,"contents":" Table Of Contents Git and GitHub Workflow For Version Control Configure git Username and Email On Your Computer Setup Your Preferred Text Editor Using VScode as your Default Text Editor Setting Nano as a Default Text Editor For JupyterHub Environments Setup Authentication For Git Through GitHub Set Up a GitHub Token For Authentication Set Up an SSH Connection to GitHub (recommended) Step 1: Generate Your SSH Key Locally Step 2: Add Your SSH Key To Your GitHub Account Update Your Remotes To Support SSH Learning Objectives\nAfter completing this page, you will be able to:\nconfigure git locally with your username and email and preferred text editor Setup git / GitHub authentication using either a token or SSH Git and GitHub Workflow For Version Control Previously, you learned how to fork GitHub repositories to make copies of other users\u0026rsquo; repositories, and you also learned how to download copies of (i.e. clone) GitHub repositories to your computer. On this page, you will learn to setup git on your computer:\nConfigure git Username and Email On Your Computer The first time that you use git on a computer, you will need to configure your GitHub.com username and email address. This information will be used to document who made changes to files in git. It is important to use the same email address and username that you setup on GitHub.com.\nYou can set your Github.com username in the terminal by typing:\n$ git config --global user.name \u0026quot;username\u0026quot;.\nNext, you can set the email for your Github.com account by typing:\n$ git config --global user.email \u0026quot;email@email.com\u0026quot;.\nUsing the --global configuration option, you are telling git to use these settings for all git repositories that you work with on your computer. Note that you only have to configure these settings one time on your computer.\nYou can check your config settings for user.name and user.email using the following commands:\ngit config user.name which returns the username that you set previously\ngit config user.email which returns the email that you set previously\nThese configuration settings ensure that changes you make to repositories are attributed to your username and email.\nSetup Your Preferred Text Editor There are many text editors available for use with Git. Some such as Nano, Sublime and Vim are fully command line based. These are useful when you are working on remote servers and Linux and are often the default text editors for most computers. You may want to switch your git default text editor to a gui based editor to make things easier when you are getting started.\nTip\nMore on setting a default text editor from GitHub. If the text editors below don\u0026rsquo;t work for you, you can visit this page to learn more about other options such as Notepad++ for windows. Using VScode as your Default Text Editor If you already use vscode, you can set it up as your default text editor to use with Git. This is particularly useful if you use the vscode terminal interface to work with git as well.\ngit config --global core.editor \u0026#34;code --wait\u0026#34; This command will set VSCODE to be your default text editor for all operations.\nSetting Nano as a Default Text Editor For JupyterHub Environments If you are using a linux based JupyterHub, we suggest setting the default text editor to Nano:\ngit config --global core.editor nano This command will set nano to be your default text editor for all operations.\nSetup Authentication For Git Through GitHub GitHub requires authentication to perform any changes to a repo. There are two ways to set up authentication for GitHub:\nUsing a personal access token which you can setup on GitHub.com and use locally to authenticate: This involves creating a token on GitHub.com and then using it as a \u0026ldquo;password\u0026rdquo; locally in bash. Using SSH: This involves a bit more setup locally but once it is setup, you can skip the authentication steps for each change that you make to a repo. In this lesson, you will learn about both options. If you are able to, we do recommend that you use SSH authentication. However a token approach works well too!\nSet Up a GitHub Token For Authentication Setting up a token is quicker in the short run as it requires fewer steps. However, in the long run, token-based authentication can be more difficult to manage given:\nYou have to enter your token every time you need to authenticate your GitHub account (unless you cache /store it) If you lose your token value you have to refresh / create a new token. To setup a token to use for authentication, follow the GitHub guide.\nTip\nIf you chose to setup token based authentication, once you generate your token, be sure to copy it to a safe location before you close the GitHub page. If you lose the token, you will have to recreate it.\nSet Up an SSH Connection to GitHub (recommended) SSH, which stands for Secure SHell, is an alternative way of authenticating with GitHub from your computer. While SSH setup involves more steps, once it is set up you never have to authenticate your connection to GitHub again. This is because you will have a Key stored locally on your computer that can be authenticated against a key stored on your GitHub account.\nSetting up SSH involves two steps:\ncreating the key itself locally on your computer, and adding the key to your GitHub account. Below you will find two GitHub tutorials that walk you through all of the steps needed to setup SSH on your computer.\nStep 1: Generate Your SSH Key Locally Use this link to find step by step instructions for generating your SSH key.\nMake sure to follow the instructions all the way to the end of the page where you add your SSH key to your SSH agent. NOTE: Around step 4 the instructions tell you to set up a passphrase for your SSH connection. While you can do this if you like, it is an optional step. SSH is already very secure, so if you decide you don\u0026rsquo;t want an SSH passphrase, you can just hit return on the empty passphrase line.\nStep 2: Add Your SSH Key To Your GitHub Account After you\u0026rsquo;ve generated your key and added it to your agent, you need to add the key to your GitHub account.This link provides step by step instructions on adding the SSH key to your account. The instructions vary slightly from operating system to operating system, so be sure you are using the instructions for the operating system running on your computer (MAC, Windows or Linux).\nNOTE FOR LINUX USERS: On the help page for adding your SSH key to your GitHub account, GitHub recommends that you install xclip and then use that to copy your SSH public key. While this works, it can cause problems on some computer. If you run into an issue on this step, you can always use cat path/to/file and manually copy the output you get in the terminal. The cat command in BASH will copy the contents of a file to your clipboard. You can then paste that output (which is your secure key) into GitHub to finalize connecting your computer to GitHub. {: .notice\u0026ndash;success }\nUpdate Your Remotes To Support SSH If you have been using a username / password login to authenticate with GitHub, and you are switching to SSH-based authentication, you will likely need to update the remotes attached to your GitHub repo(s). A quick way to see if this is the case, is\nat the command line, CD to the repo directory (cd path/to/practice-git) when in the directory of interest, run git remote -v If the URL returned looks like the one below, starting with https:// then you are still authenticating using either a password or a token. If you setup token-based authentication, then you can use the https:// remote setup.\n$ (base) practice-git $ git remote -v origin https://github.com/your-username/practice-git.git (fetch) origin https://github.com/your-username/practice-git.git (push) However, if you wish to use SSH, then you will need to UPDATE the remote for your repo.\n$ (base) practice-git $ git remote -v origin git@github.com:your-username/practice-git.git (fetch) origin git@github.com:your-username/practice-git.git (push) To change your remote repository url from https to SSH, do the following\nGo to the repository on GitHub.com Use the green Code button to copy the SSH URL for that repo (see animated gif below for how to do that) Use git remote set-url to update the url locally You can find the url for your GitHub repo using the green code button. Copy the url and then use git --set-url to update the remote locally. $ git remote set-url origin git@github.com:your-username/practice-git.git Once you have updated your remotes, SSH authentication should work!\n","date":"April 18, 2023","image":null,"permalink":"/lessons/git-github/git-intro/4-local-git-setup/","title":"Setup git locally"},{"categories":["Python","Get-started","Packages"],"contents":" Table Of Contents What is a Python Package Open Source Python Packages for spatial and time series data Where Do Packages Live On Your Computer? Python Packages Can Contain Modules What is a Module in a Python Package? Import and Install Python Packages for Science\nLearn about managing Python packages in your code.\nLearning Objectives\nAfter completing this chapter, you will be able to:\nExplain what a package is in Python. Import a package into Python. List important Python packages for science. What You Need You should have Bash and Conda setup on your computer and a conda environment such as geo-python. Follow the Setup Git, Bash, and Conda on your computer to install these tools.\nWhat is a Python Package In Python, a package is a bundle of pre-built functionality that adds to the functionality available in base Python. Base Python can do many things such as perform math and other operations. However, Python packages can significantly extend this functionality.\nYou can think of a Python package as a toolbox filled with tools. The tools in the toolbox can be used to do things that you would have to otherwise hand code in base Python. These tasks are things that many people might want to do in Python, thus warranting the creation of a package. After all, it doesn\u0026rsquo;t make sense for everyone to hand code everything!\nFor example, the matplotlib package allows you to create plots of data. Since most of us create plots routinely, having a Python package to create plots makes programming more efficient for everyone who needs to create plots.\nOpen Source Python Packages for spatial and time series data There are many different packages available for Python. Some of these are optimized for scientific tasks such as:\nStatistics Machine learning Using geospatial data Plotting \u0026amp; visualizing data Accessing data programmatically and more! The list below contains a few core packages that are often used by scientists as examples.\nos: handle files and directories. glob: create lists of files and directories for batch processing. matplotlib: plot data. numpy: work with data in array formats (often related to imagery and raster format data). pandas: work with tabular data in a DataFrame format. rioxarray: work with raster (image and arrays) data using XArray and rioxarray approaches. geopandas: work with vector format (shapefiles, geojson - points, lines and polygons) using a geodataframe format. Where Do Packages Live On Your Computer? Packages are organized directories of code that can be installed and then imported to your code file (e.g. .py script, Jupyter Notebook file).\nWhen you install a package, you may be wondering, where does it go? If you are using mambaforge on a Mac, the packages that you install are located in your mambaforge directory under envs (e.g. /home/username/mambaforge/envs/).\nWhen you install a package into the conda environment of your choice. For example, geo-python that you installed in this tutorial series will end up in the /home/username/mambaforge/envs/geo-python folder.\nWhen you install Python packages in an conda environment, they will be located within the /home/username/mambaforge/envs/environment-name directory. Once packages are installed in your Python environment (e.g. geo-python conda environment), you can call them in Python at the command line, in a script (.py file), or in a Jupyter Notebook file.\nYou have to explicitly call and load (i.e. import) each package that you want to use in your script (.py file) or Jupyter Notebook file, in order for the functions (or tools) in that package to be available for use in your code.\nTip\nYou can import Python packages using import package-name. Once a package has been imported, you can call functions from that package\nPython Packages Can Contain Modules Packages can contain many modules (i.e. units of code) that each provide different functions and can build on each other. For example, the matplotlib package provides functionality to plot data using modules, one of which is the commonly used module called pyplot.\nEvery Python package should have a unique name. This allows you to import the package using the name with the import command.\nFor example, the command below imports the matplotlib package.\nimport matplotlib Now you can create a plot but notice that you have to call matplotlib as a full word each time you run a plot command below.\nimport matplotlib # Sample data x = [1, 2, 3, 4, 5] y = [2, 4, 6, 8, 10] # Create a basic plot matplotlib.pyplot.plot(x, y) # Add labels and title matplotlib.pyplot.xlabel(\u0026#34;X-axis\u0026#34;) matplotlib.pyplot.ylabel(\u0026#34;Y-axis\u0026#34;) matplotlib.pyplot.title(\u0026#34;Simple Matplotlib Plot\u0026#34;) # Show the plot matplotlib.pyplot.show() A basic line plot What is a Module in a Python Package? Packages often have modules. A module is a set of related functionality that lives within the package.\nFor example, pyplot is a module within the matplotlib package that makes it easier to quickly set up plots.\nYou can import a specific module like pyplot by first calling the package name and then the module name - using . to separate the names like this:\nimport matplotlib.pyplot You can also import the module using an alias or short name, such as plt for matplotlib.pyplot.\nimport matplotlib.pyplot as plt Below you import both matplotlib and numpy to create a plot.\nimport matplotlib.pyplot as plt import numpy as np # Generate some sample data x = np.linspace(0, 2 * np.pi, 100) y = np.sin(x) # Create a prettier plot plt.figure(figsize=(8, 6)) # Set the figure size plt.plot( x, y, label=\u0026#34;Sine Wave\u0026#34;, color=\u0026#34;b\u0026#34;, linewidth=2, linestyle=\u0026#34;-\u0026#34;, marker=\u0026#34;o\u0026#34;, markersize=6, markerfacecolor=\u0026#34;r\u0026#34;, ) plt.title(\u0026#34;Prettier Matplotlib Plot\u0026#34;) plt.xlabel(\u0026#34;X-axis\u0026#34;) plt.ylabel(\u0026#34;Y-axis\u0026#34;) plt.grid(True, linestyle=\u0026#34;--\u0026#34;, alpha=0.7) plt.legend(loc=\u0026#34;upper right\u0026#34;) plt.tight_layout() # Show the plot plt.show() Another line plot And an interactive plot\u0026hellip;\nprint(\u0026#34;bokeh would be here\u0026#34;) # from bokeh.plotting import figure, show # # Sample data # x = [1, 2, 3, 4, 5] # y = [2, 4, 6, 8, 10] # # Create a Bokeh figure # p = figure( # title=\u0026#34;Simple Bokeh Plot\u0026#34;, x_axis_label=\u0026#34;X-axis\u0026#34;, y_axis_label=\u0026#34;Y-axis\u0026#34; # ) # # Add a line plot # p.line(x, y, line_width=2, legend_label=\u0026#34;Line\u0026#34;) # # Display the plot # show(p) bokeh would be here ","date":"February 13, 2023","image":null,"permalink":"/python/install/import-packages.html","title":"Import \u0026 Work With Python Packages"},{"categories":["Python","Get-started"],"contents":" Table Of Contents What to install - mambaforge Python distribution Why Install Mambaforge instead of Miniconda or Anaconda Install Mambaforge from the conda-forge channel Installation instructions by operating system Learning Objectives\nAt the end of this activity, you will be able to:\nInstall the lightweight Mambaforge Python distribution which uses the conda-forge channel as a default. What You Need\nBefore you start this lesson, be sure that you have a computer with internet access.\nHow to Install a Lightweight Python Distribution Using Conda There are numerous ways to install Python on your computer. Here, you will learn how to install Python using conda and the conda-forge channel.\nIf you are a scientist, installing Python using conda is especially preferred as it can result in fewer environment conflicts. This is especially true if you are working with spatial data.\nInstalling conda also will allow you to create unique, curated Python conda environments for your projects which is a recommended way of working in Python in general. What to install - mambaforge Python distribution While you can install any distribution that you wish, we suggest that you install the mambaforge distribution. Mambaforge is a light weight Python distribution that installs both Python and a subset of the core packages. It uses the conda-forge conda channel. This channel is ideal for installing scientific tools and will result in cleaner, easier to use environments with fewer conflicts.\nThe many other ways to install Python You can also install Python by:\nUsing Homebrew Installing the entire Anaconda distribution: This is a large distribution maintained by Anaconda, Inc. It is not recommended for your initial setup as It has many additional packages that you might not need. Because it installs using the default conda channel it also could result in dependency conflicts if you have other scientific packages that you may want to install using the conda-forge channel. Using Miniconda: The miniconda distribution, also provided by Anaconda, Inc is a smaller distribution than Anaconda. While it hs fewer packages and is smaller in size than the Anaconda, this distribution still installs packages using the conda defaults channel. This means that you may still encounter environmentl conflicts if you use it. Thus we still recommend that you install mambaforge. Tip\nIf you are a GIS user and on some versions of the MAC operating system, you will also find an existing Python distribution on your computer. A quick way to figure out if Python already exists on your computer is to open up terminal or bash and run:\n➜ which python /path/to-your-python-install/mambaforge/bin/python In this lesson, you will learn how to install the mambaforge Python distribution on your computer.\nWhy Install Mambaforge instead of Miniconda or Anaconda You also learned that the conda package manager allows you to install Python packages on your computer as well as create and manage multiple Python environments, each containing different packages.\nThere are 4 different distributions that you may wish to select from. To keep things simple, we suggest that you install mambaforge distribution. This distribution is preferred because:\nmamba is developed in C++ and will build your environments much faster than conda the default conda channel is conda-forge which is the preferred channel for science it\u0026rsquo;s much smaller than the anaconda distribution Below is a quick comparison of all 4 distributions.\nTool Mambaforge Miniforge Anaconda Miniconda Size ~62mb ~42MB Large ~2GB Small ~43MB What\u0026rsquo;s installed Conda, Core Python + Mamba Conda, Core Python Installs Anaconda Navigator, Spyder, and many other tools that may not be needed Conda, Core Python Default conda channel conda-forge conda-forge conda default conda default **Default tool manager ** mamba conda conda conda Install Mambaforge from the conda-forge channel Tip\nFor Anaconda Users If you want to use mambaforge, we strongly suggest that you uninstall Anaconda. If you have environments that you are woried about losing, then you can install mambaforge following the instructions listed below to overwrite the default conda channels.\nInstallation instructions by operating system Mac OS X Linux Windows Mac :::{.callout-tip}\nFor homebrew Users If you have homebrew installed, then the easiest way to install mambaforge is to use:\nbrew install mambaforge\nFind directions for installing homebrew here. :::\nIf you don\u0026rsquo;t have homebrew, you can download a mamba installer and use bash to install it.\nDownload the installer: Mambaforge installer for Mac. Note that if you have a newer mac with a m1 or m2 chip, then you will want to install the Apple Silicon version: OS X arm64 (Apple Silicon) Mambaforge-MacOSX-arm64\nIf you have an older mac use\nOS X x86_64 Mambaforge-MacOSX-x86_64\nIn your Terminal window, cd to the location of the download file. Run: bash Mambaforge3-latest-MacOSX-modify-filename-here.sh.\nFollow the prompts on the installer screens.\nIf you are unsure about any setting, accept the defaults. You can change them later.\nTo make sure that the changes take effect, close and then re-open your Terminal window.\nOnce you are done you can test that the install worked.\nTest your install on Mac Search for and open the Terminal program (found in /Applications/Utilities). In this Terminal window, type bash and hit enter. If you do not get a message back, then Bash is available for use.\nNext, type git and hit enter. If you see a list of commands that you can execute, then Git has been installed correctly.\nNext, type conda and hit enter. Again, if you see a list of commands that you can execute, then Mambaforge Python has been installed correctly.\nClose the Terminal by typing exit.\nLinux Download the installer: Mambaforge installer for Linux.\nIn your Terminal window, run making sure to modify the file name to match the file that you downloaded:\nbash Mambaforge3-latest-Linux-modify-file-name-here.sh.\nFollow the prompts on the installer screens.\nIf you are unsure about any setting, accept the defaults. You can change them later.\nTo make sure that the changes take effect, close and then re-open your Terminal window.\nOnce you are done, you can test that your install worked.\nTest your install on Linux Search for and open the Terminal program. In this Terminal window, type bash and hit enter. If you do not get a message back, then Bash is available for use.\nNext, type git and hit enter. If you see a list of commands that you can execute, then Git has been installed correctly.\nNext, type conda and hit enter. Again, if you see a list of commands that you can execute, then Mambaforge Python has been installed correctly.\nClose the Terminal by typing exit.\nWindows \u0026lt;p\u0026gt;\u0026lt;i class=\u0026quot;fa fa-star\u0026quot; aria-hidden=\u0026quot;true\u0026quot;\u0026gt;\u0026lt;/i\u0026gt; Tip\u0026lt;/p\u0026gt; Windows Users: if you already have Anaconda installed, then you will be asked to confirm that you want to make the Mambaforge installation the default conda on your computer when you follow step 6 of the Mambaforge installation.\nDownload the Mambaforge installer for Windows.\nRun the installer by double-clicking on the downloaded file and follow the steps below.\nClick “Run”. Click on \u0026ldquo;Next\u0026rdquo;. Click on “I agree”. Leave the selection on “Just me” and click on “Next”. Click on \u0026ldquo;Next\u0026rdquo;. Select the first option for “Add Anaconda to my PATH environment variable” and also leave the selection on “Register Anaconda as my default Python 3.x”. Click on “Install”. Note that even though the installation is for Mambaforge, the installer uses the word Anaconda in these options. You will also see a message in red text that selecting “Add Anaconda to my PATH environment variable” is not recommended; continue with this selection to make using conda easier in Git Bash. If you have questions or concerns, please contact your instructor. When the install is complete, Click on “Next”. Click on “Finish”. Once you are done, you can test that the installation worked.\nTest your install on Windows Search for and open the Git Bash program. In this Terminal window, type bash and hit enter. If you do not get a message back, then Bash is available for use.\nNext, type git and hit enter. If you see a list of commands that you can execute, then Git has been installed correctly.\nNext, type conda and hit enter. Again, if you see a list of commands that you can execute, then Mambaforge Python has been installed correctly.\nClose the Terminal by typing exit.\n","date":"February 13, 2023","image":null,"permalink":"/install-python-science-conda/","title":"Install Python Using Conda \u0026 Conda-forge - Mambaforge"},{"categories":["collaboration-version-control"],"contents":" Table Of Contents Setup Bash / Terminal Bash Setup Git Setup Setup Bash / Terminal Learn how to setup git and Bash on your computer so you can get started using git for version control and.\nLearning Objectives\nAt the end of this lesson you will know how to:\nInstall Bash and Git. Open a terminal and test that Bash, Git are running properly on your machine. Bash Setup Mac OS X Linux Windows The default shell in all versions of Mac OS X is Bash, so no need to install anything. You access Bash from the Terminal (found in /Applications/Utilities). You may want to keep Terminal in your dock for this workshop. Linux\nThe default shell is usually Bash but if your machine is set up differently you can run it by opening the Terminal and typing: bash. There is no need to install anything.\nDownload the Git for Windows installer.\nRun the installer by double-clicking on the downloaded file and by following the steps below:\nClick on “Run”. Click on \u0026ldquo;Next\u0026rdquo;. Click on \u0026ldquo;Next\u0026rdquo;. Click on \u0026ldquo;Next\u0026rdquo;. Click on \u0026ldquo;Next\u0026rdquo;. Click on \u0026ldquo;Next\u0026rdquo;. Leave the selection on \u0026ldquo;Git from the command line and also from 3rd party software\u0026rdquo; and click on \u0026ldquo;Next\u0026rdquo;. NOTE: If you forgot to do this, the programs that you need for the workshop will not work properly. If this happens, rerun the installer and select the appropriate option. Click on \u0026ldquo;Next\u0026rdquo;. Leave the selection on \u0026ldquo;Checkout Windows-style, commit Unix-style line endings\u0026rdquo; and click on “Next”. Select the second option for Use Windows\u0026rsquo; default console window and click on \u0026ldquo;Next\u0026rdquo;. Click on \u0026ldquo;Next\u0026rdquo;. Click on \u0026ldquo;Install\u0026rdquo;. When the install is complete, click on “Finish”. This installation will provide you with both Git and Bash within the Git Bash program.\nGit Setup Git is a version control system that lets you track who made changes to what and when, and it has options for easily updating a shared or public version of your code on GitHub.\nYou will need a supported web browser (current versions of Chrome, Firefox or Safari, or Internet Explorer version 9 or above).\nGit installation instructions borrowed and modified from Software Carpentry.\nMac OS X Linux Windows Video Tutorial\nInstall Git on Macs by downloading and running the most recent installer for \u0026ldquo;mavericks\u0026rdquo; if you are using OS X 10.9 and higher -or- if using an earlier OS X, choose the most recent \u0026ldquo;snow leopard\u0026rdquo; installer, from this list.\nAfter installing Git, there will not be anything in your /Applications folder, as Git is a command line program.\nData Tip If you are running Mac OSX El Capitan, you might encounter errors when trying to use Git. Make sure you update XCODE. Read more - a Stack Overflow Issue.\nIf Git is not already available on your machine, you can try to install it via your distro’s package manager. For Debian/Ubuntu, run sudo apt-get install git and for Fedora run sudo yum install git. Git was installed on your computer as part of your Bash install. ","date":"February 12, 2023","image":null,"permalink":"/git-intro/","title":"Git Started: Setup Bash \u0026 Git"},{"categories":["Python","Get-started","Environment"],"contents":" Table Of Contents What You Need Why Use Conda Environments for Python Conda vs Mamba Install the geo-python Conda Environment About Conda Environments What is a YAML (.yml) File? Use Conda Environments View a List of All Installed Conda Environments Activate a Conda Environment Deactivate a Conda Environment Delete a Conda Environment Update a Conda Environment Using a YAML File Work with Conda Environments In this lesson, you will learn how to install a conda environment from a environment.yml file. You will create and install a conda environment called geo-python. You can customize and rename this environment however you wish.\nLearning Objectives\nAt the end of this activity, you will be able to:\nInstall a new environment using mamba env create.\nView a list of the available conda environments using mamba env list.\nActivate, update and delete conda environments using mamba. You should have Bash and the Miniconda distribution of Python 3.x setup on your computer. Be sure that you have:\nInstalled a conda Python distribution (preferably miniforge but this lesson will work with any conda distribution)\nInstalled mamba\nHave Bash / Terminal working on your computer. Click here if you haven\u0026rsquo;t setup bash yet. What You Need You should have Bash and the Miniforge distribution of Python 3.x setup on your compute.\nBe sure you have:\nCompleted the setup for Git, Bash and Conda . Why Use Conda Environments for Python Conda allows you to have different environments installed on your computer to access different versions of Python and different libraries.\nThis is helpful as:\nIt allows you to have individual environments that are specific to particular workflows and projects It allows you to install things in a contained environment that doesn\u0026rsquo;t interfere or cause conflicts with other environments on your computer It allows you to to test workflows on different versions of python on your computer. Conda vs Mamba The termininolgy around conda vs mamba can a bit confusing when you are just getting strated.\nAnaconda: Anaconda, inc is a company that has a Python distribution called Anaconda. This distribution contains numerous packages and tools and is close to 2GB in size. Anaconda cloud: the anaconda cloud (anaconda.org) is a package repository (similar to pyPI) where conda packages are stored. The cloud has numerous channels or sub repositories including the default channel, conda-forge and bioconda. conda-forge is the most commonly used channel for scientific tools. Conda: is a package management tool that can be used to install packages from the anaconda cloud. Mamba: is a package management tool that is similar to conda, but because it\u0026rsquo;s built using C++, it\u0026rsquo;s much faster. I suggest that you use mamba instead of conda for all commands given it will be much faster when you installed an environment or new packages into your environment.\nFor this lesson, I assume that you\u0026rsquo;ve installed Python using mambaforge . If you have another distribution sucha s minconda, or miniforge, you may need to install mamba for the commands below to work.\nAlternatively you can swap out conda for mamba to run all of the commands below! Just note that installation time for your environment will be much slower if you use conda!\nNote that it will take a significantly longer time to install of the packages found in the geo-python environment using conda vs mamba! Also, note that you need to have internet access to install packages as conda and conda-forge are online repositories!\nInstall the geo-python Conda Environment In this lesson you can either chose to create your own environment file, or you can use an existing environment that is available on GitHub!\nIf you wish to start with an existing environment, you can follow the instructions below:\nFork and clone a GitHub repository from https://github.com/lwasser/geo-python to a location on your computer. This repository contains a file called environment.yml that contains the instructions to install the environment. If it\u0026rsquo;s not already open, open the Terminal on your computer (e.g. Git Bash for Windows or Terminal on a Mac/Linux). In the Terminal, set your directory to the cloned geo-python dir using cd to change directories (e.g. cd geo-python). Once you are in the geo-python directory, you can create your environment. To do this run: mamba env create -f environment.yml. Once the environment is installed you can activate it using: mamba activate geo-python. To view a list of all conda environments available on your machine run: mamba info --envs. Note that it takes time to install of the packages found in the geo-python environment as it needs to download and install each library. Also, you need to have internet access for this to run!\nNote\nThe instructions above will only work if you run them in the directory where you placed the environment.yml file.\nImportant\nWindows Users: A reminder that the lessons on this website assume that you are using Git Bash as your primary terminal.\nAbout Conda Environments What is a YAML (.yml) File? When you work with conda, you can create custom lists that tell conda where to install libraries from, and in what order. You can even specify a particular version.\nYou write this list using YAML (Yet Another Markup Language). This is an alternative to using pip to install Python packages.\nIn previous steps, you used a custom .yml list to install all of the Python libraries that you will need to complete the Python lessons on this website. This .yml list is customized to install libraries from the repositories and in an order that minimizes conflicts.\nIf you run into any issues installing the environment from the .yml, let us know!\nNext, explore your new conda environment. Here\u0026rsquo;s what part of the .yml file looks like:\nname: geo-python channels: - conda-forge - defaults dependencies: - python=3.7 - pip # Core scientific python - numpy - matplotlib Notice at the top of the file there is the environment name. This file has a few key parts:\nName: the name of the environment that you will call when you want to activate the environment. The name geo-python is defined in the environment.yml file.\nChannels: this list identifies where packages will be installed from. There are many options including conda, conda-forge and pip. You will be predominately using conda-forge for the geo-python environment.\nDependencies: Dependencies are all of the things that you need installed in order for the environment to be complete. In the example, Python version 3.7 is specified. The order in which the libraries should be installed is also specified.\nUse Conda Environments You can have different Python environments on your computer. Conda allows you to easily jump between environments using a set of commands that you run in your terminal.\nThis section provides an overview of various commands to manage your conda environments.\nFor more detailed instructions for using these commands, see Installing Python Packages in Conda Environments .\nOr, have a look at the Conda documentation notes that review the steps below and more!\nView a List of All Installed Conda Environments You can see a list of all installed conda environments by typing:\nconda info --envs If you want to use a particular environment that you have installed on your computer, you need to activate it.\nFor example, if a Python package such as geopandas is only installed in the geo-python environment, and not the default conda environment, you will not be able to access it (e.g. import it to Jupyter Notebook), unless you have the geo-python environment activated.\nActivate a Conda Environment To activate an environment, use the Terminal to navigate to a directory on your computer where you have some code or a Jupyter notebook that you wish to work on using the cd command. Then, type the following command to activate the environment (e.g. geo-python):\nmamba activate geo-python For older installations of conda (versions prior to 4.6) on Mac, Linux, and Git Bash for Windows, type:\nsource activate geo-python Windows Users: The first time that you try to run the \u0026ldquo;mamba activate\u0026rdquo; command, you may be asked to configure Git Bash to use \u0026ldquo;mamba activate\u0026rdquo;. You can do this by running the command \u0026ldquo;conda init bash\u0026rdquo;, just one time. After that, Git Bash will be configured to use \u0026ldquo;mamba activate\u0026rdquo; moving forward.\nOnce the environment is activated, the name of the activated environment will appear in parentheses on the left side of your terminal (e.g. (geo-python).\nData Tip\nNote that after you restart the Terminal, the geo-python environment is no longer active. You will need to activate the geo-python environment each time you start the Terminal by running the appropriate command provided above for your operating system.\nDeactivate a Conda Environment If needed, you can deactivate a conda environment. Deactivating the environment switches you back to the default environment in your computer.\nconda deactivate Delete a Conda Environment If you ever want to delete an environment, you must first deactivate that environment and then type:\nmamba env remove --name myenv and replace myenv with the name of the environment that you want to remove.\nRemember to never delete your root environment.\nUpdate a Conda Environment Using a YAML File Once you have created a conda environment, you can update it anytime by first activating the environment and then running the mamba env update command.\nThe example below updates the geo-python environment using the environment.yml file. In this example, the command mamba env update is run in the same directory that contains the environment.yml file.\n$ mamba activate geo-python $ mamba env update -f environment.yml Running this command will update your current geo-python environment to include the most current versions of the packages listed in that environment file.\nConda Resources:\nConda documentation for installing conda managing mamba environments. ","date":"February 12, 2023","image":null,"permalink":"/lessons/python/install-python/3-create-conda-environment/","title":"How to Create a Conda Environment For Your Python Workflow"},{"categories":["Python","Get-started","Environment"],"contents":" Tips and tricks Print your current local environment Print information about a specific package We\u0026rsquo;ve all been there\u0026hellip; trying to import a package and python can\u0026rsquo;t find it? Below are a few tricks to figure out what environment you are in!\nThis can be useful when troubleshooting code that is not running as you expect!\nTips and tricks Print your current local environment this is a good trick for when you\u0026rsquo;re working in Python and something seems wrong with your environment. It could be that you are in a different environment than you think you are!\nPython to the rescue!\nThe code snippet below will print the conda environment name to help you troubleshootz.\nimport os # print(os.environ[\u0026#39;CONDA_DEFAULT_ENV\u0026#39;]) os.environ.keys \u0026lt;bound method Mapping.keys of environ({'CI': 'true', 'CONDA_DIR': '/opt/conda', 'DENO_DOM_PLUGIN': '/opt/quarto/bin/tools/deno_dom/libplugin.so', 'DENO_NO_UPDATE_CHECK': '1', 'GITHUB_ACTION': '__run_5', 'GITHUB_ACTIONS': 'true', 'GITHUB_ACTION_REF': '', 'GITHUB_ACTION_REPOSITORY': '', 'GITHUB_ACTOR': 'lwasser', 'GITHUB_ACTOR_ID': '7649194', 'GITHUB_API_URL': 'https://api.github.com', 'GITHUB_BASE_REF': '', 'GITHUB_ENV': '/__w/_temp/_runner_file_commands/set_env_1272238a-b424-45eb-9043-b4a6629e1bc8', 'GITHUB_EVENT_NAME': 'push', 'GITHUB_EVENT_PATH': '/github/workflow/event.json', 'GITHUB_GRAPHQL_URL': 'https://api.github.com/graphql', 'GITHUB_HEAD_REF': '', 'GITHUB_JOB': 'build-website', 'GITHUB_OUTPUT': '/__w/_temp/_runner_file_commands/set_output_1272238a-b424-45eb-9043-b4a6629e1bc8', 'GITHUB_PATH': '/__w/_temp/_runner_file_commands/add_path_1272238a-b424-45eb-9043-b4a6629e1bc8', 'GITHUB_REF': 'refs/heads/main', 'GITHUB_REF_NAME': 'main', 'GITHUB_REF_PROTECTED': 'false', 'GITHUB_REF_TYPE': 'branch', 'GITHUB_REPOSITORY': 'lwasser/dss-web', 'GITHUB_REPOSITORY_ID': '691241804', 'GITHUB_REPOSITORY_OWNER': 'lwasser', 'GITHUB_REPOSITORY_OWNER_ID': '7649194', 'GITHUB_RETENTION_DAYS': '90', 'GITHUB_RUN_ATTEMPT': '1', 'GITHUB_RUN_ID': '8054263206', 'GITHUB_RUN_NUMBER': '2', 'GITHUB_SERVER_URL': 'https://github.com', 'GITHUB_SHA': '82729080919261f7d1b5bbc67b98421bdbb67373', 'GITHUB_STATE': '/__w/_temp/_runner_file_commands/save_state_1272238a-b424-45eb-9043-b4a6629e1bc8', 'GITHUB_STEP_SUMMARY': '/__w/_temp/_runner_file_commands/step_summary_1272238a-b424-45eb-9043-b4a6629e1bc8', 'GITHUB_TRIGGERING_ACTOR': 'lwasser', 'GITHUB_WORKFLOW': 'Build DSS website', 'GITHUB_WORKFLOW_REF': 'lwasser/dss-web/.github/workflows/build-site.yml@refs/heads/main', 'GITHUB_WORKFLOW_SHA': '82729080919261f7d1b5bbc67b98421bdbb67373', 'GITHUB_WORKSPACE': '/__w/dss-web/dss-web', 'GOLANG_ARCH': 'amd64', 'GOLANG_OS': 'linux', 'GOLANG_VERSION': '1.17', 'HOME': '/github/home', 'HOSTNAME': '8165c58e10e8', 'LANG': 'C.UTF-8', 'LC_ALL': 'C.UTF-8', 'MPLBACKEND': 'module://matplotlib_inline.backend_inline', 'PATH': '/__t/node/18.19.1/x64/bin:/opt/conda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/go/bin', 'PWD': '/__w/dss-web/dss-web', 'QUARTO_BIN_PATH': '/opt/quarto/bin', 'QUARTO_DENO': '/opt/quarto/bin/tools/deno-x86_64-unknown-linux-gnu/deno', 'QUARTO_FILTER_DEPENDENCY_FILE': '/tmp/quarto-session2bc549f1/b3ac132a/fd1745d7', 'QUARTO_PROFILE': '', 'QUARTO_PROJECT_DIR': '/__w/dss-web/dss-web', 'QUARTO_ROOT': '/', 'QUARTO_SHARE_PATH': '/opt/quarto/share', 'RUNNER_ARCH': 'X64', 'RUNNER_ENVIRONMENT': 'github-hosted', 'RUNNER_NAME': 'GitHub Actions 7', 'RUNNER_OS': 'Linux', 'RUNNER_TEMP': '/__w/_temp', 'RUNNER_TOOL_CACHE': '/__t', 'RUNNER_WORKSPACE': '/__w/dss-web', 'SHLVL': '2', '_': '/opt/quarto/bin/tools/deno-x86_64-unknown-linux-gnu/deno', 'QUARTO_FIG_WIDTH': '8', 'QUARTO_FIG_HEIGHT': '5', 'QUARTO_FIG_DPI': '192', 'QUARTO_FIG_FORMAT': 'png', 'PYDEVD_USE_FRAME_EVAL': 'NO', 'JPY_PARENT_PID': '1178', 'TERM': 'xterm-color', 'CLICOLOR': '1', 'FORCE_COLOR': '1', 'CLICOLOR_FORCE': '1', 'PAGER': 'cat', 'GIT_PAGER': 'cat'})\u0026gt; Print information about a specific package \u0026hellip;when you are developing tools you may want to make sure your package is installed in editable mode\u0026hellip;\n","date":"February 12, 2023","image":null,"permalink":"/lessons/python/install-python/5-python-environment-tips/","title":"Tips and tricks for checking your Python Environment"},{"categories":["Python","Get-started","Environment","Conda"],"contents":" Table Of Contents Conda Environments in Python The Third Party Library Issue Python Environments What is Conda Why Conda 1. Conda is Cross Platform 2. Conda Can Install Specific Versions of Python 3. Environments are Native to Conda 4. Conda is Better at Dependency Management 5. Conda Manages External Dependencies Channels in Conda Default Channels Conda-Forge Learning Objectives\nAfter completing this page, you will be able to:\nUnderstand how dependency management can play a large role in Python programming. Explain how to use conda environments to manage your third party libraries. Conda Environments in Python The Third Party Library Issue Most projects written in Python require a certain set of third party libraries that are not in the Python standard library. There is a good chance you have used at least one of these libraries such as numpy, matplotlib, or pandas.\nThird party libraries are critical to making Python the great tool it is. Developers and scientists all over the world are constantly improving and adding to the functionality Python provides by writing new packages. When you require one of these third party libraries in your workflow, they are called dependencies because your workflow depends on them to function.\nWhile having a plethora of open source functionality available to the community is one of Python\u0026rsquo;s greatest strengths, dependency management is a major challenge for many Python programmers. This is especially true for Python programmers who are not dedicated software engineers!\nIn Python, regardless of what project you are working on, your computer will store third party libraries in the same location. This means that if you depend on GDAL 2.4.2 in an older project and GDAL 3.0.1 in your brand new project, you will need a way to store these dependencies separately. If they aren\u0026rsquo;t stored separately, Python will not be able to tell the difference between the two that are both installed in the same location.\nDependency conflicts can cause significant issues when working with Python. Conda allows you to install multiple environments on your computer and to address dependency issues. Image from XKCD Webcomic. Source: XKCD Python Environments A Python environment is a dedicated directory where specific dependencies can be stored and maintained. Environments have unique names and can be activated when you need them, allowing you to have ultimate control over the libraries that are installed at any given time.\nYou can create as many environments as you want. Because each one is independent, they will not interact or \u0026ldquo;mess up\u0026rdquo; the other. Thus, it is common for programmers to create new environments for each project that they work on.\nOften times, information about your environment can assist you in debugging certain errors. Starting with a clean environment for each project can help you control the number of variables to consider when looking for bugs.\nBroadly, you have two package managers to choose from when creating a Python environment:\nYou can create a virtual environment (venv) using pip to install packages or You can create a conda environment using mamba installing packages for you. On this page, you will learn about conda environments. For science applications conda environments have several strengths compared to **pip* environments.\nWhat is Conda Conda is a package and environment management tool that allows you to install Python packages on your computer as well as create and manage multiple Python environments, each containing different packages.\nWhile you will predominately use conda for the installation and management of Python libraries, it is important to note that conda can install and manage software of many different languages; this can be important when working with external dependencies that aren\u0026rsquo;t built in Python.\nWhy Conda As mentioned previously, when it comes to installing packages you have two options: pip and conda.\nPip stands for Pip Installs Packages and is the default package manager available in Python. Conda, on the other hand, is an environment manager that aims to do what pip does with added functionality.\nThere are several reasons that make conda such a strong contender for managing your Python environments over pip.\n1. Conda is Cross Platform Libraries available on conda are stored on the Anaconda Cloud and can easily be installed on any system. Conda libraries are stored as binary files, which makes them easy for conda to unpack anywhere you have Anaconda, Miniforge or Mambaforge installed.\nPip packages, on the other hand, are stored in a more more complex way (as wheels or source distributions). This storage format requires a compiler to unpack. This means that you need to have Python installed to install packages with pip, which brings up the next point.\n2. Conda Can Install Specific Versions of Python Conda allows you to install and run a specific version of Python. Anything installed with pip requires a wheel or source distribution for the Python compiler to break down.\nUnfortunately, this means that pip cannot directly install versions of Python. It also means that you have to install your preferred Python distribution before even starting the process of working with a new virtual environment.\n3. Environments are Native to Conda As discussed previously, when using pip, you must use a virtual environment as your environment for managing dependencies. However, virtualenv is a Python library itself. With some configuration and other wrappers, virtual environments can provide a satisfactory development environment. However, when you use conda, environments are available to you without needing to install an additional tool.\n4. Conda is Better at Dependency Management Pip makes no attempt to check if all of your dependencies are satisfied at once. Instead, pip may allow incompatible dependencies to be installed depending on the order you install packages.\nConda instead uses what they call a \u0026ldquo;satisfiability solver\u0026rdquo;, which checks that all dependencies are met at all times. This comes with a performance hit due to having to comb through every dependency on each install, but will save you headaches down the road.\n5. Conda Manages External Dependencies Pip is lacking when it comes to managing and tracking external dependencies and accessing all of the available libraries out there.\nGDAL is a prime example of a package that can be installed easily through conda, but is difficult to install any other way. Part of this is due to the fact that GDAL is not a native Python application, and conda has a much easier time dealing with that.\nWhile you may prefer using conda, there is no clear consensus whether pip or conda are better.\nWhile they both install packages, conda is very different than pip. Conda can do much more than pip at the cost of increased complexity.\nFor a simple workflow, the benefits of conda may not be worth the extra effort to get up and running. For working with geospatial libraries, conda is definitely preferred, given it\u0026rsquo;s ability to resolve dependency issues associated with GDAL.\nTip\nSometimes Python libraries are on Github and not on a repository like PyPI. In this case, or in the case that you want to install a specific development version of a package, you can install Python libraries from Github using pip install git+git://github.com/path-to-github-user/repo-name.git\nChannels in Conda Above you learned about the differences between using pip vs conda to install Python packages. However, there are also different channels available in conda that you can use to install packages into your conda environment.\nBelow, you will learn about the conda-forge channel which is an alternative to the default conda channel. This is the channel that you should use as your primary \u0026ldquo;go to\u0026rdquo; installation channel, when setting up your Python environment for scientific applications.\nThere are two main conda channels that you should consider: * conda: this is the default repository that is used and maintained for the Anaconda distribution of Python. To install libraries from conda, you use the syntax conda install package-name at the command line. * conda-forge: This channel is community maintained, and we have found that installing many of the spatial packages using conda-forge will minimize conflicts between packages. To install libraries from conda-forge, you use the syntax conda install -c conda-forge package-name at the command line.\nNote\nNote: bioconda is another channel that is widely used in science but we are not going to discuss that channel in this tutorial.\nFor consistency, we suggest that always use the conda-forge repository when you install packages in a conda environment. However in some cases, a package may not be on conda. In these instances you may be forced to use pip.\nYou can think about a channel as a bucket of tools that are all located on the same server / in the same main directory. The three main Python channels are conda default (managed by Anaconda), conda-forge and bioconda. Image Source: https://geohackweek.github.io/datasharing/01-conda-tutorial/. Default Channels Conda doesn\u0026rsquo;t just have a single repository where all uploaded packages live. When a package is uploaded to conda, it must be uploaded to a specific channel, which is just a separate URL where packages published to that channel reside.\nThere is a default conda channel where the stock conda packages live. These packages are maintained by conda and are generally very stable. If you do not specify channels in your configuration settings, whenever you run conda install x, conda will search its default channel for that package; if the package isn\u0026rsquo;t on that channel, it will throw an error.\nYou want to specify one channel (e.g. conda-forge) as often as you can to avoid problems that arise with mixing channels. Much like having two different versions of GDAL installed in the same place, mixing channels can confuse conda\u0026rsquo;s satisfiability solver for managing dependencies.\nThe resulting errors can make it look like you have a package installed; however, Python will fail to find dependencies when you run it.\nConda-Forge The Python community has responded to this mixing channel issue and created a community managed channel that solves the channel mixing issues associated with default conda channels. This community managed channel is called conda-forge.\nConda-forge has thousands of contributors and functions very similar to PyPi (pip\u0026rsquo;s central package repository). Conda-forge mandates that your dependencies all be installed via conda-forge or the default channels. By requiring packages to be installed via conda-forge by default, any package installed via conda-forge should not have issues with mixing channels of dependencies.\nConda-forge aims to do better than PyPi by providing an automated testing suite along with more peer review of code before it is published. These extra rules make conda-forge an ideal choice for creating Python environments for science.\nIf you are a scientist, we suggest that you use conda-forge to install all needed packages. Using a consistent conda channel will save time in the long run as you list of packages and associated dependencies grows.\n","date":"February 12, 2023","image":null,"permalink":"/lessons/python/install-python/2-why-conda-for-science/","title":"Why Conda is Better for Scientific Environments"},{"categories":null,"contents":"","date":"July 14, 2021","image":null,"permalink":"/partners/pyopensci/","title":"pyOpenSci"},{"categories":null,"contents":"","date":"January 1, 1","image":null,"permalink":"/about/","title":"About Us"},{"categories":null,"contents":"Leah is the executive director of pyOpenSci .\n","date":"January 1, 1","image":"https://datascienceskills.org/images/authors/leah-wasser_huded43a700a0ef5fa404c44c0caeed7dc_393269_650x0_resize_q90_lanczos.jpg","permalink":"/author/leah-wasser/","title":"Leah Wasser"}]